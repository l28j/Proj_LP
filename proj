

% 106221 Joao Lucas Morais Cardoso Tavares Rodrigues
:- set_prolog_flag(answer_write_options,[max_dEventosth(0)]). % para listas compRestotas
:- ['dados.pl'], ['keywords.pl']. % ficheiros a importar.



%PREDICADOS AUXILIARES

periodos(p1,p1,p1_2).
periodos(p3,p3,p3_4).
periodos(p2,p2,p1_2).
periodos(p4,p4,p3_4). 
semestres(p1_2,p1,p2).
semestres(p3_4,p3,p4).
dias_semana([segunda-feira,terca-feira,quarta-feira,quinta-feira,sexta-feira]).

%3.1

eventosSemSalas(EventosSemSala):-
    /*eh verdade se EventosSemSala eh uma lista, ordenada e
    sem elementos repetidos, de IDs de eventos sem sala;*/
    findall(ID,evento(ID,_,_,_,'semSala'),EventosSemSala). %Procura todos os IDs de eventos sem sala

eventosSemSalasDiaSemana(DiaDaSemana,EventosSemSala):- 
    /*eh verdade se EventosSemSala eh uma lista, ordenada e sem elementos repetidos, de IDs de eventos sem sala
    que decorrem em DiaDaSemana*/
    %Procura todos os IDs de eventos sem sala num dia da semana fornecido
    findall(ID,(evento(ID,_,_,_,'semSala'),horario(ID,DiaDaSemana,_,_,_,_)),EventosSemSala). 


/*eh verdade se ListaPeriodos eh uma lista de periodos e EventosSemSala eh uma lista, 
ordenada e sem elementos repetidos, de IDs de eventos sem sala nos periodos de ListaPeriodos.
Contabilizando os eventos sem salas associados a disciplinas semestrais tambem*/
eventosSemSalasPeriodo(List,EventosSemSala):-  %Introducao de uma variavel auxiliar
    eventosSemSalasPeriodo(List,[],EventosSemSala).

eventosSemSalasPeriodo([],EventosSemSala_Aux,EventosSemSala_Aux). %Caso Terminal

eventosSemSalasPeriodo([P|Resto],EventosSemSala_Aux,EventosSemSala):-
    periodos(P,P1,P2),                                       %Call do predicado periodos
    findall(ID,evento(ID,_,_,_,'semSala'),EventosSSala),
    findall(ID,(horario(ID,_,_,_,_,P1);horario(ID,_,_,_,_,P2)),EventosPeriodo),
    intersection(EventosSSala,EventosPeriodo,EventosSemSala_Aux1),%Criacao de uma lista dos eventos sem sala que ocorrem no periodo fornecido
    append(EventosSemSala_Aux,EventosSemSala_Aux1,EventosSemSala_Aux2), %Juncao da lista dos eventos com a auxiliar criada
    sort(EventosSemSala_Aux2,EventosSemSala_Aux3),  %Ordenacao da lista e eliminacao de elementos repetidos
    eventosSemSalasPeriodo(Resto,EventosSemSala_Aux3,EventosSemSala).  %Retorno do predicado com a lista atualizada


%3.2

/*eh verdade se EventosNoPeriodo eh a lista, ordenada e sem elementos repetidos, de IDs dos eventos
de ListaEventos que ocorrem no periodo Periodo.*/

organizaEventos(ListaEventos,Periodo,EventosNoPeriodo):- %Introducao de uma variavel auxiliar
    organizaEventos(ListaEventos,Periodo,EventosNoPeriodo,[]).
organizaEventos([],_,EventosNoPeriodo,EventosNoPeriodo_Aux):- %Caso Terminal com ordenacao do resultado e eliminacao de elementos repetidos
    sort(EventosNoPeriodo_Aux,EventosNoPeriodo).
organizaEventos([Id|Resto],Periodo,EventosNoPeriodo,EventosNoPeriodo_Aux):-
    periodos(Periodo,P1,P2), %Call do predicado periodos
    (horario(Id,_,_,_,_,P1); %Verifica se o evento ocorre no periodo fornecido
    horario(Id,_,_,_,_,P2)),
    append(EventosNoPeriodo_Aux,[Id],EventosNoPeriodo_Aux1), %Adiciona o evento a lista auxiliar caso este seja evento do periodo
    organizaEventos(Resto,Periodo,EventosNoPeriodo,EventosNoPeriodo_Aux1).
organizaEventos([Id|Resto],Periodo,EventosNoPeriodo,EventosNoPeriodo_Aux):-
    periodos(Periodo,P1,P2), %Call do predicado periodos
    horario(Id,_,_,_,_,Periodo_Refe),  %Verifica se o evento nao  ocorre no periodo de referencia
    (Periodo_Refe\==P1,Periodo_Refe\==P2),
    organizaEventos(Resto,Periodo,EventosNoPeriodo,EventosNoPeriodo_Aux).

    
eventosMenoresQue(Duracao,ListaEventosMenoresQue):-
/*eh verdade se ListaEventosMenoresQue eh a lista ordenada 
e sem elementos repetidos dos identificadores dos eventos que tem duracao menor ou igual a Duracao.*/
    findall(ID,(horario(ID,_,_,_,D,_),D=<Duracao),ListaEventosMenoresQue). %Procura todos os eventos com duracao menor ou igual a Duracao

eventosMenoresQueBool(ID,Duracao):-
/*eh verdade se o evento identificado por ID tiver duracao igual ou menor a Duracao.*/
    horario(ID,_,_,_,D,_),
    D=<Duracao.

procuraDisciplinas(Curso, ListaDisciplinas):-
/*eh verdade se ListaDisciplinas eh a lista
ordenada alfabeticamente do nome das disciplinas do curso Curso.*/
    findall(ID,turno(ID,Curso,_,_),ListaID),%Procura todos os IDs de eventos do curso fornecido
    findall(Disciplinas,(member(ID,ListaID),evento(ID,Disciplinas,_,_,_)),ListaDisciplinas1),%Procura todos os nomes das disciplinas do curso fornecido
    sort(ListaDisciplinas1,ListaDisciplinas).%Ordena a lista e elimina elementos repetidos



/*eh verdade se Semestres e uma lista com duas listas. A lista na primeira posicao contem as disciplinas de
ListaDisciplinas do curso Curso que ocorrem no primeiro semestre; idem para a lista na
segunda posicao, que contem as que ocorrem no segundo semestre. Ambas as listas devem
estar ordenadas alfabeticamente e nao devem ter elementos repetidos. O predicado falha se
nao existir no curso Curso uma disciplina de ListaDisciplinas.*/

verificador_Disciplinas([],_).

verificador_Disciplinas([Disciplina|Resto],Curso):-     %Verifica se a disciplina pertence ao curso fornecido
    procuraDisciplinas(Curso,ListaProcuraDisciplinas),
    member(Disciplina,ListaProcuraDisciplinas),!,
    verificador_Disciplinas(Resto,Curso).
%AUXILIAR QUE ORGANIZA AS DISCIPLINAS DO PRIMEIRO SEMESTRE
organizaDisciplinas_1SEMESTRE(ListaDisciplinas,Curso,Semestre1):-   %Introducao de uma variavel auxiliar
    organizaDisciplinas_1SEMESTRE_aux(ListaDisciplinas,Curso,Semestre1,[]).
organizaDisciplinas_1SEMESTRE_aux([],_,Semestre1,Semestre1_Aux):- %Caso Terminal com ordenacao do resultado e eliminacao de elementos repetidos
    sort(Semestre1_Aux,Semestre1).
organizaDisciplinas_1SEMESTRE_aux([Disciplina|Resto],Curso,Semestre1,Semestre1_Aux):-
    semestres('p1_2',P1,P2),    %Call do predicado semestres
    evento(Id,Disciplina,_,_,_), %Verifica se a disciplina pertence ao curso fornecido
    (horario(Id,_,_,_,_,P1);horario(Id,_,_,_,_,P2);horario(Id,_,_,_,_,'p1_2')), %Verifica se a disciplina ocorre no primeiro semestre
    append(Semestre1_Aux,[Disciplina],Semestre1_Aux1), %Adiciona a disciplina a lista auxiliar caso esta seja do primeiro semestre
    organizaDisciplinas_1SEMESTRE_aux(Resto,Curso,Semestre1,Semestre1_Aux1).
%CASO ESTAS NAO SEJAM DO PRIMEIRO SEMESTRE
organizaDisciplinas_1SEMESTRE_aux([Disciplina|Resto],Curso,Semestre1,Semestre1_Aux):-
    semestres('p1_2',P1,P2),   %Call do predicado semestres
    evento(Id,Disciplina,_,_,_), %Verifica se a disciplina pertence ao curso fornecido
    horario(Id,_,_,_,_,Periodo_Refe), %Verifica se a disciplina ocorre no primeiro semestre
    (Periodo_Refe\==P1,Periodo_Refe\==P2,Periodo_Refe\=='p1_2'), %Verifica se a disciplina ocorre no primeiro semestre
    organizaDisciplinas_1SEMESTRE_aux(Resto,Curso,Semestre1,Semestre1_Aux).

%AUXILIAR QUE ORGANIZA AS DISCIPLINAS DO SEGUNDO SEMESTRE
organizaDisciplinas_2SEMESTRE(ListaDisciplinas,Curso,Semestre2):-  %Introducao de uma variavel auxiliar
    organizaDisciplinas_2SEMESTRE_aux(ListaDisciplinas,Curso,Semestre2,[]). %Call do predicado auxiliar
organizaDisciplinas_2SEMESTRE_aux([],_,Semestre2,Semestre2_Aux):-
    sort(Semestre2_Aux,Semestre2). %Caso Terminal com ordenacao do resultado e eliminacao de elementos repetidos
organizaDisciplinas_2SEMESTRE_aux([Disciplina|Resto],Curso,Semestre2,Semestre2_Aux):-
    semestres('p3_4',P1,P2), %Call do predicado semestres
    evento(Id,Disciplina,_,_,_), %Verifica se a disciplina pertence ao curso fornecido
    (horario(Id,_,_,_,_,P1);horario(Id,_,_,_,_,P2);horario(Id,_,_,_,_,'p3_4')), %Verifica se a disciplina ocorre no segundo semestre
    append(Semestre2_Aux,[Disciplina],Semestre2_Aux1), %Adiciona a disciplina a lista auxiliar caso esta seja do segundo semestre
    organizaDisciplinas_2SEMESTRE_aux(Resto,Curso,Semestre2,Semestre2_Aux1).
%CASO ESTAS NAO SEJAM DO SEGUNDO SEMESTRE
organizaDisciplinas_2SEMESTRE_aux([Disciplina|Resto],Curso,Semestre2,Semestre2_Aux):-
    semestres('p3_4',P1,P2), %Call do predicado semestres
    evento(Id,Disciplina,_,_,_), %Verifica se a disciplina pertence ao curso fornecido
    horario(Id,_,_,_,_,Periodo_Refe), %Verifica se a disciplina ocorre no segundo semestre
    (Periodo_Refe\==P1,Periodo_Refe\==P2,Periodo_Refe\=='p3_4'), %Verifica se a disciplina ocorre no segundo semestre
    organizaDisciplinas_2SEMESTRE_aux(Resto,Curso,Semestre2,Semestre2_Aux).

%PREDICADO QUE VERIFICA SE EXISTEM DISCIPLINAS IGUAIS ENTRE OS SEMESTRES
verifica_exi_dis_iguais(ListaSemestre1,ListaSemestre2,Lista_Semestre_2Final):-
    verifica_exi_dis_iguais_aux(ListaSemestre1,ListaSemestre2,Lista_Semestre_2Final,[]). %Call do predicado auxiliar
verifica_exi_dis_iguais_aux(_,[],Lista_Semestre_2Final_Aux,Lista_Semestre_2Final_Aux). %Caso Terminal
verifica_exi_dis_iguais_aux(ListaSemestre1,[Disciplina|Resto],Lista_Semestre_2Final,Lista_Semestre_2Final_Aux):-
    member(Disciplina,ListaSemestre1), %Verifica se a disciplina pertence ao primeiro semestre
    verifica_exi_dis_iguais_aux(ListaSemestre1,Resto,Lista_Semestre_2Final,Lista_Semestre_2Final_Aux).
verifica_exi_dis_iguais_aux(ListaSemestre1,[Disciplina|Resto],Lista_Semestre_2Final,Lista_Semestre_2Final_Aux):-
    append(Lista_Semestre_2Final_Aux,[Disciplina],Lista_Semestre_2Final_Aux1), %Adiciona a disciplina a lista auxiliar caso esta nao pertenca ao primeiro semestre
    verifica_exi_dis_iguais_aux(ListaSemestre1,Resto,Lista_Semestre_2Final,Lista_Semestre_2Final_Aux1).


organizaDisciplinas(ListaDisciplinas,Curso,Semestres):- 
    verificador_Disciplinas(ListaDisciplinas,Curso), %Verifica se as disciplinas pertencem ao curso fornecido
    organizaDisciplinas_1SEMESTRE(ListaDisciplinas,Curso,Semestre1), %Organiza as disciplinas do primeiro semestre
    organizaDisciplinas_2SEMESTRE(ListaDisciplinas,Curso,Semestre2), %Organiza as disciplinas do segundo semestre
    verifica_exi_dis_iguais(Semestre1,Semestre2,Lista_Semestre_2Final), %Verifica se existem disciplinas iguais entre os semestres
    append([Semestre1],[Lista_Semestre_2Final],Semestres). %Junta os semestres numa lista

/*eh verdade se TotalHoras for o numero de horas total dos eventos associadas ao curso Curso, no ano e periodo.*/

horasCurso(Periodo, Curso, Ano, TotalHoras):- 
    periodos(Periodo,Periodo1,Periodo2), %Call do predicado periodos
    findall(ID,turno(ID,Curso,Ano,_),ListaID), %Lista com os IDs dos eventos associados ao curso Curso
    sort(ListaID,ListaID_F), %Lista com os IDs dos eventos associados ao curso Curso, no ano, sem repeticoes
    findall(Horas,(member(ID,ListaID_F),horario(ID,_,_,_,Horas,Periodo1)),ListaHoras1),
    findall(Horas,(member(ID,ListaID_F),horario(ID,_,_,_,Horas,Periodo2)),ListaHoras2),
    append(ListaHoras1,ListaHoras2,ListaHoras), %Lista com as horas dos eventos associados ao curso Curso
    sumlist(ListaHoras,TotalHoras). %Soma as horas dos eventos associados ao curso Curso

/*eh verdade se Evolucao for uma lista de tuplos na forma (Ano, Periodo, NumHoras), em que NumHoras eh o total de horas associadas ao curso
Curso, no ano e periodo.*/

evolucaoHorasCurso(Curso,Evolucao):-
    evolucaoHorasCurso(Curso,Evolucao,[],1). %Call do predicado auxiliar
evolucaoHorasCurso(Curso,Evolucao,Evolucao_Aux,Ano):-
    Ano =< 3,
    horasCurso('p1',Curso,Ano,TotalHoras1), %Call do predicado horasCurso para o periodo 1
    append(Evolucao_Aux,[(Ano,'p1',TotalHoras1)],Evolucao1), 
    horasCurso('p2',Curso,Ano,TotalHoras2), %Call do predicado horasCurso para o periodo 2
    append(Evolucao1,[(Ano,'p2',TotalHoras2)],Evolucao2),
    horasCurso('p3',Curso,Ano,TotalHoras3), %Call do predicado horasCurso para o periodo 3
    append(Evolucao2,[(Ano,'p3',TotalHoras3)],Evolucao3),
    horasCurso('p4',Curso,Ano,TotalHoras4), %Call do predicado horasCurso para o periodo 4
    append(Evolucao3,[(Ano,'p4',TotalHoras4)],Evolucao4),
    Ano_Aux is Ano+1,
    evolucaoHorasCurso(Curso,Evolucao,Evolucao4,Ano_Aux).
evolucaoHorasCurso(_,Evolucao,Evolucao,_).



%3.3

/*eh verdade se Horas for o numero de horas sobrepostas  entre o evento que tem inicio em HoraInicioEvento e fim em HoraFimEvento, 
e o slot que tem inicio em HoraInicioDada e fim em HoraFimDada. Se nao existirem sobreposicoes o
predicado deve falhar (false).*/
ocupaSlot(HoraInicioDada, HoraFimDada, HoraInicioEvento, HoraFimEvento, Horas) :-
    Fim is min(HoraFimDada, HoraFimEvento), %Fim eh o minimo entre o fim do slot e o fim do evento
    Inicio is max(HoraInicioDada, HoraInicioEvento), %Inicio eh o maximo entre o inicio do slot e o inicio do evento
    Horas is Fim-Inicio, %Horas eh a diferenca entre o fim e o inicio
    Horas>0.

/*eh verdade se SomaHoras for o numero de horas ocupadas nas salas do tipo TipoSala, no
intervalo de tempo definido entre HoraInicio e HoraFim, no dia da semana DiaSemana, e no
periodo.*/

numHorasOcupadas(Periodo, TipoSala, DiaSemana, HoraInicio, HoraFim, SomaHoras):-
    periodos(Periodo,P1,P2), %Call do predicado periodos
    salas(TipoSala,ListaSalas), %Call do predicado salas
    findall(ID,((horario(ID,DiaSemana,HI,HF,_,P1);horario(ID,DiaSemana,HI,HF,_,P2))),ListaIdsHorario),
    findall(ID,(evento(ID,_,_,_,Sala),member(Sala,ListaSalas)),ListaIdsSalas),
    intersection(ListaIdsHorario,ListaIdsSalas,ListaIds), %Lista com os IDs dos eventos que ocorrem nas salas do tipo TipoSala
    sort(ListaIds,ListaIdsSorted), %Lista com os IDs dos eventos que ocorrem nas salas do tipo TipoSala, sem repeticoes
    findall(Horas,(horario(ID,_,HI,HF,_,_),member(ID,ListaIdsSorted),ocupaSlot(HoraInicio,HoraFim,HI,HF,Horas)), ListaHoras),
    sumlist(ListaHoras,SomaHoras). %Soma as horas ocupadas nas salas do tipo TipoSala.

/*eh verdade se Max for o numero de horas possiveis de ser ocupadas por salas do tipo TipoSala, no intervalo de tempo
definido entre HoraInicio e HoraFim.*/
ocupacaoMax(TipoSala, HoraInicio, HoraFim, Max):-
    salas(TipoSala,ListaSalas), %Call do predicado salas
    length(ListaSalas,NumSalas), %Numero de salas do tipo TipoSala
    Max is NumSalas*(HoraFim-HoraInicio). 

/*eh verdade se Percentagem for a divisao de
SomaHoras por Max, multiplicada por 100.*/
percentagem(SomaHoras, Max, Percentagem):-
    Percentagem is (SomaHoras/Max)*100.

/*eh verdade se Resultados for uma lista ordenada de tuplos do tipo casosCriticos(DiaSemana, TipoSala,
Percentagem) em que DiaSemana, TipoSala e Percentagem sao, respectivamente, um dia
da semana, um tipo de sala e a sua percentagem de ocupacao, no intervalo de tempo entre
HoraInicio e HoraFim, e supondo que a percentagem de ocupacao relativa a esses elementos
esta acima de um dado valor critico (Threshold).*/

ocupacaoCritica(HoraInicio,HoraFim,Threshold,Resultados):-
    dias_semana(Lista_Dias_Semana),
    findall(Periodo,periodos(Periodo,_,_),Lista_Periodos),
    findall(Tipo_Sala,salas(Tipo_Sala,_),Lista_Tipo_Salas),
    findall(casosCriticos(Dia_Semana,Tipo_Sala,Percentagem),
        ((member(Periodo,Lista_Periodos),member(Dia_Semana,Lista_Dias_Semana),member(Tipo_Sala,Lista_Tipo_Salas)),
        ocupacaoMax(Tipo_Sala,HoraInicio,HoraFim,Max),
        numHorasOcupadas(Periodo,Tipo_Sala,Dia_Semana,HoraInicio,HoraFim,SomaHoras),
        percentagem(SomaHoras,Max,Percentagem_Aux),
        Percentagem_Aux>Threshold,
        Percentagem is ceiling(Percentagem_Aux)),
        Resultados_Aux),
    sort(Resultados_Aux,Resultados).


%And now for somethung completely different

%PREDICADOS DE TODOS OS CASOS POSSIVEIS DE DISPOSICAO DAS PESSOAS NA MESA

lado(Pessoa_1,Pessoa_2,[[Pessoa_1,Pessoa_2,_],[_,_],[_,_,_]]).
lado(Pessoa_1,Pessoa_2,[[_,Pessoa_1,Pessoa_2],[_,_],[_,_,_]]).
lado(Pessoa_1,Pessoa_2,[[_,_,_],[_,_],[Pessoa_2,Pessoa_1,_]]).
lado(Pessoa_1,Pessoa_2,[[_,_,_],[_,_],[_,Pessoa_2,Pessoa_1]]).
lado(Pessoa_1,Pessoa_2,[[_,_,_],[_,_],[Pessoa_1,Pessoa_2,_]]).
lado(Pessoa_1,Pessoa_2,[[_,_,_],[_,_],[_,Pessoa_1,Pessoa_2]]).
lado(Pessoa_1,Pessoa_2,[[Pessoa_2,Pessoa_1,_],[_,_],[_,_,_]]).
lado(Pessoa_1,Pessoa_2,[[_,Pessoa_2,Pessoa_1],[_,_],[_,_,_]]).


naoLado(Pessoa_1,Pessoa_2,[[Pessoa_1,_,Pessoa_2],[_,_],[_,_,_]]).
naoLado(Pessoa_1,Pessoa_2,[[_,_,_],[_,_],[Pessoa_1,_,Pessoa_2]]).
naoLado(Pessoa_1,Pessoa_2,[[Pessoa_2,_,Pessoa_1],[_,_],[_,_,_]]).
naoLado(Pessoa_1,Pessoa_2,[[_,_,_],[_,_],[Pessoa_2,_,Pessoa_1]]).
naoLado(Pessoa_1,Pessoa_2,[[Pessoa_1,_,_],[_,_],[_,_,Pessoa_2]]).
naoLado(Pessoa_1,Pessoa_2,[[_,Pessoa_1,_],[_,_],[_,_,Pessoa_2]]).
naoLado(Pessoa_1,Pessoa_2,[[_,_,Pessoa_1],[_,_],[_,_,Pessoa_2]]).
naoLado(Pessoa_1,Pessoa_2,[[_,_,_],[Pessoa_1,_],[_,_,Pessoa_2]]).
naoLado(Pessoa_1,Pessoa_2,[[_,_,_],[_,Pessoa_1],[_,_,Pessoa_2]]).
naoLado(Pessoa_1,Pessoa_2,[[Pessoa_2,_,_],[_,_],[_,_,Pessoa_1]]).
naoLado(Pessoa_1,Pessoa_2,[[_,Pessoa_2,_],[_,_],[_,_,Pessoa_1]]).
naoLado(Pessoa_1,Pessoa_2,[[_,_,Pessoa_2],[_,_],[_,_,Pessoa_1]]).
naoLado(Pessoa_1,Pessoa_2,[[_,_,_],[Pessoa_2,_],[_,_,Pessoa_1]]).
naoLado(Pessoa_1,Pessoa_2,[[_,_,_],[_,Pessoa_2],[_,_,Pessoa_1]]).
naoLado(Pessoa_1,Pessoa_2,[[Pessoa_1,_,_],[_,_],[_,Pessoa_2,_]]).
naoLado(Pessoa_1,Pessoa_2,[[_,Pessoa_1,_],[_,_],[_,Pessoa_2,_]]).
naoLado(Pessoa_1,Pessoa_2,[[_,_,Pessoa_1],[_,_],[_,Pessoa_2,_]]).
naoLado(Pessoa_1,Pessoa_2,[[_,_,_],[Pessoa_1,_],[_,Pessoa_2,_]]).
naoLado(Pessoa_1,Pessoa_2,[[_,_,_],[_,Pessoa_1],[_,Pessoa_2,_]]).
naoLado(Pessoa_1,Pessoa_2,[[Pessoa_2,_,_],[_,_],[_,Pessoa_1,_]]).
naoLado(Pessoa_1,Pessoa_2,[[_,Pessoa_2,_],[_,_],[_,Pessoa_1,_]]).
naoLado(Pessoa_1,Pessoa_2,[[_,_,Pessoa_2],[_,_],[_,Pessoa_1,_]]).
naoLado(Pessoa_1,Pessoa_2,[[_,_,_],[Pessoa_2,_],[_,Pessoa_1,_]]).
naoLado(Pessoa_1,Pessoa_2,[[_,_,_],[_,Pessoa_2],[_,Pessoa_1,_]]).
naoLado(Pessoa_1,Pessoa_2,[[Pessoa_1,_,_],[_,_],[Pessoa_2,_,_]]).
naoLado(Pessoa_1,Pessoa_2,[[_,Pessoa_1,_],[_,_],[Pessoa_2,_,_]]).
naoLado(Pessoa_1,Pessoa_2,[[_,_,Pessoa_1],[_,_],[Pessoa_2,_,_]]).
naoLado(Pessoa_1,Pessoa_2,[[_,_,_],[Pessoa_1,_],[Pessoa_2,_,_]]).
naoLado(Pessoa_1,Pessoa_2,[[_,_,_],[_,Pessoa_1],[Pessoa_2,_,_]]).
naoLado(Pessoa_1,Pessoa_2,[[Pessoa_2,_,_],[_,_],[Pessoa_1,_,_]]).
naoLado(Pessoa_1,Pessoa_2,[[_,Pessoa_2,_],[_,_],[Pessoa_1,_,_]]).
naoLado(Pessoa_1,Pessoa_2,[[_,_,Pessoa_2],[_,_],[Pessoa_1,_,_]]).
naoLado(Pessoa_1,Pessoa_2,[[_,_,_],[Pessoa_2,_],[Pessoa_1,_,_]]).
naoLado(Pessoa_1,Pessoa_2,[[_,_,_],[_,Pessoa_2],[Pessoa_1,_,_]]).

frente(Pessoa_1,Pessoa_2,[[Pessoa_1,_,_],[_,_],[Pessoa_2,_,_]]).
frente(Pessoa_1,Pessoa_2,[[_,Pessoa_1,_],[_,_],[_,Pessoa_2,_]]).
frente(Pessoa_1,Pessoa_2,[[_,Pessoa_2,_],[_,_],[_,Pessoa_1,_]]).
frente(Pessoa_1,Pessoa_2,[[_,_,Pessoa_2],[_,_],[_,_,Pessoa_1]]).
frente(Pessoa_1,Pessoa_2,[[Pessoa_1,_,_],[_,_],[Pessoa_2,_,_]]).
frente(Pessoa_1,Pessoa_2,[[_,Pessoa_1,_],[_,_],[_,Pessoa_2,_]]).
frente(Pessoa_1,Pessoa_2,[[_,_,Pessoa_1],[_,_],[_,_,Pessoa_2]]).
frente(Pessoa_1,Pessoa_2,[[Pessoa_2,_,_],[_,_],[Pessoa_1,_,_]]).

naoFrente(Pessoa_1,Pessoa_2,[[Pessoa_1,_,_],[_,_],[_,Pessoa_2,_]]).
naoFrente(Pessoa_1,Pessoa_2,[[Pessoa_1,_,_],[_,_],[_,_,Pessoa_2]]).
naoFrente(Pessoa_1,Pessoa_2,[[_,Pessoa_1,_],[_,_],[Pessoa_2,_,_]]).
naoFrente(Pessoa_1,Pessoa_2,[[_,Pessoa_1,_],[_,_],[_,_,Pessoa_2]]).
naoFrente(Pessoa_1,Pessoa_2,[[_,_,Pessoa_1],[_,_],[Pessoa_2,_,_]]).
naoFrente(Pessoa_1,Pessoa_2,[[_,_,Pessoa_1],[_,_],[_,Pessoa_2,_]]).
naoFrente(Pessoa_1,Pessoa_2,[[Pessoa_2,_,_],[_,_],[_,Pessoa_1,_]]).
naoFrente(Pessoa_1,Pessoa_2,[[Pessoa_2,_,_],[_,_],[_,_,Pessoa_1]]).
naoFrente(Pessoa_1,Pessoa_2,[[_,Pessoa_2,_],[_,_],[Pessoa_1,_,_]]).
naoFrente(Pessoa_1,Pessoa_2,[[_,Pessoa_2,_],[_,_],[_,_,Pessoa_1]]).
naoFrente(Pessoa_1,Pessoa_2,[[_,_,Pessoa_2],[_,_],[Pessoa_1,_,_]]).
naoFrente(Pessoa_1,Pessoa_2,[[_,_,Pessoa_2],[_,_],[_,Pessoa_1,_]]).
naoFrente(Pessoa_1,Pessoa_2,[[_,_,_],[Pessoa_1,Pessoa_2],[_,_,_]]).
naoFrente(Pessoa_1,Pessoa_2,[[_,_,_],[Pessoa_2,Pessoa_1],[_,_,_]]).
naoFrente(Pessoa_1,Pessoa_2,[[Pessoa_2,_,_],[_,Pessoa_1],[_,_,_]]).
naoFrente(Pessoa_1,Pessoa_2,[[_,Pessoa_2,_],[_,Pessoa_1],[_,_,_]]).
naoFrente(Pessoa_1,Pessoa_2,[[_,_,Pessoa_2],[_,Pessoa_1],[_,_,_]]).
naoFrente(Pessoa_1,Pessoa_2,[[_,_,_],[_,Pessoa_1],[Pessoa_2,_,_]]).
naoFrente(Pessoa_1,Pessoa_2,[[_,_,_],[_,Pessoa_1],[_,Pessoa_2,_]]).
naoFrente(Pessoa_1,Pessoa_2,[[_,_,_],[_,Pessoa_1],[_,_,Pessoa_2]]).
naoFrente(Pessoa_1,Pessoa_2,[[Pessoa_2,_,_],[Pessoa_1,_],[_,_,_]]).
naoFrente(Pessoa_1,Pessoa_2,[[_,Pessoa_2,_],[Pessoa_1,_],[_,_,_]]).
naoFrente(Pessoa_1,Pessoa_2,[[_,_,Pessoa_2],[Pessoa_1,_],[_,_,_]]).
naoFrente(Pessoa_1,Pessoa_2,[[_,_,_],[Pessoa_1,_],[Pessoa_2,_,_]]).
naoFrente(Pessoa_1,Pessoa_2,[[_,_,_],[Pessoa_1,_],[_,Pessoa_2,_]]).
naoFrente(Pessoa_1,Pessoa_2,[[_,_,_],[Pessoa_1,_],[_,_,Pessoa_2]]).
naoFrente(Pessoa_1,Pessoa_2,[[Pessoa_1,_,_],[_,Pessoa_2],[_,_,_]]).
naoFrente(Pessoa_1,Pessoa_2,[[_,Pessoa_1,_],[_,Pessoa_2],[_,_,_]]).
naoFrente(Pessoa_1,Pessoa_2,[[_,_,Pessoa_1],[_,Pessoa_2],[_,_,_]]).
naoFrente(Pessoa_1,Pessoa_2,[[_,_,_],[_,Pessoa_2],[Pessoa_1,_,_]]).
naoFrente(Pessoa_1,Pessoa_2,[[_,_,_],[_,Pessoa_2],[_,Pessoa_1,_]]).
naoFrente(Pessoa_1,Pessoa_2,[[_,_,_],[_,Pessoa_2],[_,_,Pessoa_1]]).
naoFrente(Pessoa_1,Pessoa_2,[[Pessoa_1,_,_],[Pessoa_2,_],[_,_,_]]).
naoFrente(Pessoa_1,Pessoa_2,[[_,Pessoa_1,_],[Pessoa_2,_],[_,_,_]]).
naoFrente(Pessoa_1,Pessoa_2,[[_,_,Pessoa_1],[Pessoa_2,_],[_,_,_]]).
naoFrente(Pessoa_1,Pessoa_2,[[_,_,_],[Pessoa_2,_],[Pessoa_1,_,_]]).
naoFrente(Pessoa_1,Pessoa_2,[[_,_,_],[Pessoa_2,_],[_,Pessoa_1,_]]).
naoFrente(Pessoa_1,Pessoa_2,[[_,_,_],[Pessoa_2,_],[_,_,Pessoa_1]]).
naoFrente(Pessoa_1,Pessoa_2,[[Pessoa_1,Pessoa_2,_],[_,_],[_,_,_]]).
naoFrente(Pessoa_1,Pessoa_2,[[_,Pessoa_1,Pessoa_2],[_,_],[_,_,_]]).
naoFrente(Pessoa_1,Pessoa_2,[[_,_,_],[_,_],[Pessoa_1,Pessoa_2,_]]).
naoFrente(Pessoa_1,Pessoa_2,[[_,_,_],[_,_],[_,Pessoa_1,Pessoa_2]]).
naoFrente(Pessoa_1,Pessoa_2,[[Pessoa_2,Pessoa_1,_],[_,_],[_,_,_]]).
naoFrente(Pessoa_1,Pessoa_2,[[_,Pessoa_2,Pessoa_1],[_,_],[_,_,_]]).
naoFrente(Pessoa_1,Pessoa_2,[[_,_,_],[_,_],[Pessoa_2,Pessoa_1,_]]).
naoFrente(Pessoa_1,Pessoa_2,[[_,_,_],[_,_],[_,Pessoa_2,Pessoa_1]]).
naoFrente(Pessoa_1,Pessoa_2,[[_,_,_],[_,_],[Pessoa_2,_,Pessoa_1]]).
naoFrente(Pessoa_1,Pessoa_2,[[_,_,_],[_,_],[Pessoa_1,_,Pessoa_2]]).


existe(Pessoa_1,[[Pessoa_1,_,_],[_,_],[_,_,_]]).
existe(Pessoa_1,[[_,Pessoa_1,_],[_,_],[_,_,_]]).
existe(Pessoa_1,[[_,_,Pessoa_1],[_,_],[_,_,_]]).
existe(Pessoa_1,[[_,_,_],[Pessoa_1,_],[_,_,_]]).
existe(Pessoa_1,[[_,_,_],[_,Pessoa_1],[_,_,_]]).
existe(Pessoa_1,[[_,_,_],[_,_],[Pessoa_1,_,_]]).
existe(Pessoa_1,[[_,_,_],[_,_],[_,Pessoa_1,_]]).
existe(Pessoa_1,[[_,_,_],[_,_],[_,_,Pessoa_1]]).


cab1(Pessoa_1,[[_,_,_],[Pessoa_1,_],[_,_,_]]).

cab2(Pessoa_1,[[_,_,_],[_,Pessoa_1],[_,_,_]]).


honra(Pessoa_1,Pessoa_2,[[_,_,_],[Pessoa_1,_],[Pessoa_2,_,_]]).
honra(Pessoa_1,Pessoa_2,[[_,_,Pessoa_2],[_,Pessoa_1],[_,_,_]]).

/*eh verdade se ListaPessoas for a lista com o nome das pessoas a sentar ah mesa, ListaRestricoes
for a lista de restricoes a verificar e OcupacaoMesa for uma lista com tres listas,
em que a primeira contem as pessoas de um lado da mesa (X1, X2 e X3), a segunda as
pessoas ah cabeceira (X4 e X5) e a terceira as pessoas do outro lado da mesa (X6, X7 e X8),
de modo a que essas pessoas sao exactamente as da ListaPessoas e verificam todas as
restricoes de ListaRestricoes.*/

call_Pessoa([],_).
call_Pessoa([Pessoa|ListaPessoas],OcupacaoMesa):- %Adiciona a pessoa na mesa
    call(existe(Pessoa),OcupacaoMesa), %verifica se a pessoa existe na mesa
    call_Pessoa(ListaPessoas,OcupacaoMesa).

call_Restricao([],_).
call_Restricao([Restricao|ListaRestricoes],OcupacaoMesa):- %Adiciona a restricao na mesa
    call(Restricao,OcupacaoMesa), %verifica se a restricao eh verdadeira
    call_Restricao(ListaRestricoes,OcupacaoMesa).

ocupacaoMesa(ListaPessoas,ListaRestricoes,OcupacaoMesa):- %Adiciona a pessoa e a restricao na mesa
  call_Pessoa(ListaPessoas,OcupacaoMesa), %verifica se todas as pessoas estao na mesa
  call_Restricao(ListaRestricoes,OcupacaoMesa).



